/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OllamaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/services/OllamaService.ts
var OllamaService = class {
  constructor(settings) {
    this.settings = settings;
  }
  async generateResponse(prompt, onChunk) {
    var _a;
    try {
      const response = await fetch(`${this.settings.ollamaUrl}/api/generate`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          "model": this.settings.modelName,
          "prompt": prompt,
          "stream": true
        })
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const reader = (_a = response.body) == null ? void 0 : _a.getReader();
      if (!reader) {
        throw new Error("Response body is not readable");
      }
      const decoder = new TextDecoder();
      while (true) {
        const { done, value } = await reader.read();
        if (done)
          break;
        const chunk = decoder.decode(value);
        const lines = chunk.split("\n");
        for (const line of lines) {
          if (line.trim() === "")
            continue;
          try {
            const parsed = JSON.parse(line);
            if (parsed.response) {
              onChunk(parsed.response);
            }
          } catch (e) {
            console.error("Error parsing JSON:", e);
          }
        }
      }
    } catch (error) {
      console.error("Error generating Ollama response:", error);
      onChunk(`Error: Failed to generate response from Ollama. Details: ${error.message}`);
    }
  }
  async fetchModels() {
    try {
      const response = await fetch(`${this.settings.ollamaUrl}/api/tags`);
      if (!response.ok) {
        throw new Error("Failed to fetch models");
      }
      const data = await response.json();
      return data.models.map((model) => model.name);
    } catch (error) {
      console.error("Error fetching Ollama models:", error);
      return [];
    }
  }
};

// src/models/OllamaPluginSettings.ts
var DEFAULT_SETTINGS = {
  ollamaUrl: "http://localhost:11434",
  modelName: "llama3.1"
};

// src/OllamaSuggestor.ts
var import_obsidian = require("obsidian");
var OllamaSuggestor = class extends import_obsidian.EditorSuggest {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line).slice(0, cursor.ch);
    if (line.endsWith("/")) {
      return {
        start: { line: cursor.line, ch: cursor.ch - 1 },
        end: cursor,
        query: "/"
      };
    }
    return null;
  }
  getSuggestions(context) {
    return ["ollama"];
  }
  renderSuggestion(suggestion, el) {
    el.setText(suggestion);
  }
  selectSuggestion(suggestion) {
    const editor = this.context.editor;
    const cursor = editor.getCursor();
    editor.replaceRange(suggestion + " ", { line: cursor.line, ch: cursor.ch - 1 }, cursor);
  }
};

// src/OllamaPromptModal.ts
var import_obsidian2 = require("obsidian");
var OllamaPromptModal = class extends import_obsidian2.Modal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "Ollama Prompt" });
    this.promptInput = contentEl.createEl("textarea", {
      attr: { rows: "4", cols: "50", placeholder: "Enter your prompt here" }
    });
    contentEl.createEl("br");
    const generateButton = contentEl.createEl("button", {
      text: "Generate Response",
      attr: { style: "margin-top: 10px; margin-bottom: 10px;" }
    });
    generateButton.addEventListener("click", this.generateResponse.bind(this));
    this.responseOutput = contentEl.createEl("div", { cls: "ollama-response" });
  }
  async generateResponse() {
    const prompt = this.promptInput.value;
    if (prompt) {
      this.responseOutput.setText("");
      await this.plugin.generateOllamaResponse(prompt, (chunk) => {
        this.responseOutput.setText(this.responseOutput.textContent + chunk);
      });
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/OllamaSettingTab.ts
var import_obsidian3 = require("obsidian");
var OllamaSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian3.Setting(containerEl).setName("Ollama URL").setDesc("The URL of your local Ollama instance").addText((text) => text.setPlaceholder("Enter the Ollama URL").setValue(this.plugin.settings.ollamaUrl).onChange(async (value) => {
      this.plugin.settings.ollamaUrl = value;
      await this.plugin.saveSettings();
      this.updateModelDropdown();
    }));
    const modelSetting = new import_obsidian3.Setting(containerEl).setName("Model Name").setDesc("The name of the Ollama model to use");
    modelSetting.addDropdown(async (dropdown) => {
      this.modelDropdown = dropdown;
      const models = await this.plugin.fetchOllamaModels();
      models.forEach((model) => {
        dropdown.addOption(model, model);
      });
      dropdown.setValue(this.plugin.settings.modelName);
      dropdown.onChange(async (value) => {
        this.plugin.settings.modelName = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Refresh Models").setDesc("Fetch the latest list of models from Ollama").addButton((button) => {
      button.setButtonText("Refresh").onClick(async () => {
        await this.updateModelDropdown();
        new import_obsidian3.Notice("Models refreshed");
      });
    });
  }
  async updateModelDropdown() {
    const models = await this.plugin.fetchOllamaModels();
    this.modelDropdown.clear();
    models.forEach((model) => {
      this.modelDropdown.addOption(model, model);
    });
    if (models.includes(this.plugin.settings.modelName)) {
      this.modelDropdown.setValue(this.plugin.settings.modelName);
    } else if (models.length > 0) {
      this.plugin.settings.modelName = models[0];
      await this.plugin.saveSettings();
    }
    this.modelDropdown.onChange(async (value) => {
      this.plugin.settings.modelName = value;
      await this.plugin.saveSettings();
    });
  }
};

// main.ts
var OllamaPlugin = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.isProcessingCommand = false;
  }
  async onload() {
    await this.loadSettings();
    this.ollamaService = new OllamaService(this.settings);
    const ribbonIconEl = this.addRibbonIcon("star", "Ollama AI Integration", (evt) => {
      new OllamaPromptModal(this.app, this).open();
    });
    ribbonIconEl.addClass("ollama-plugin-ribbon-class");
    this.addCommand({
      id: "open-ollama-prompt-modal",
      name: "Open Ollama prompt modal",
      callback: () => {
        new OllamaPromptModal(this.app, this).open();
      }
    });
    this.addCommand({
      id: "process-ollama-inline-command",
      name: "Process /ollama command",
      editorCallback: (editor, view) => {
        console.log("[ollama command]");
        const cursor = editor.getCursor();
        let initialLine = editor.getLine(cursor.line - 1);
        const match = initialLine.match(/^ollama\s+(.+)$/);
        if (match && !this.isProcessingCommand) {
          initialLine = initialLine.replace(/^ollama\s+/, "");
          this.isProcessingCommand = true;
          this.processOllamaCommand(editor, initialLine).finally(() => {
            this.isProcessingCommand = false;
          });
        }
      }
    });
    this.suggestor = new OllamaSuggestor(this.app, this);
    this.registerEditorSuggest(this.suggestor);
    this.addCommand({
      id: "generate-ollama-response",
      name: "Generate Ollama response",
      editorCallback: (editor, view) => {
        const selection = editor.getSelection();
        if (selection) {
          this.generateOllamaResponse(selection, (response) => {
            editor.replaceSelection(response);
          });
        }
      }
    });
    this.addSettingTab(new OllamaSettingTab(this.app, this));
    this.registerDomEvent(document, "keydown", (evt) => {
      this.handleKeyPress(evt);
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  handleKeyPress(evt) {
    if (evt.key === "Enter" && !this.isProcessingCommand) {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf.view instanceof import_obsidian4.MarkdownView) {
        const editor = activeLeaf.view.editor;
        const cursor = editor.getCursor();
        let lastLine = editor.getLine(cursor.line - 1);
        let line = editor.getLine(cursor.line);
        let initialLine = lastLine.replace(/^ollama\s+/, "");
        console.log("isProcessingCommand:", lastLine, this.isProcessingCommand);
        if (lastLine.trim().startsWith("ollama ")) {
          evt.preventDefault();
          this.isProcessingCommand = true;
          this.processOllamaCommand(editor, initialLine).finally(() => {
            this.isProcessingCommand = false;
          });
        }
      }
    }
  }
  async generateOllamaResponse(prompt, onChunk) {
    await this.ollamaService.generateResponse(prompt, onChunk);
  }
  async processOllamaCommand(editor, raw_prompt) {
    const cursor = editor.getCursor();
    const prompt = raw_prompt;
    editor.setLine(cursor.line, "");
    editor.setCursor(cursor.line, 0);
    editor.replaceRange("\n", cursor);
    let response = "";
    const updateEditor = () => {
      editor.setValue(response);
      editor.scrollIntoView({ from: cursor, to: cursor }, true);
    };
    await this.ollamaService.generateResponse(prompt, (chunk) => {
      response += chunk;
      updateEditor();
    });
    updateEditor();
    editor.setCursor(cursor.line + 1 + response.split("\n").length - 1, 0);
    new import_obsidian4.Notice("Ollama response generated");
  }
  async fetchOllamaModels() {
    return this.ollamaService.fetchModels();
  }
};
//# sourceMappingURL=data:application/json;base64,
